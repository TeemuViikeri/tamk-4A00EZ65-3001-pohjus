/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package e07

import com.google.gson.Gson
import com.google.gson.stream.JsonReader
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*
import java.net.HttpURLConnection
import java.net.URL
import kotlin.math.*
import kotlin.concurrent.thread

data class People(var results: Array<Character>)

data class Character(
    var name: String,
    var height: Int,
    var mass: Int,
    var bmi: Double
)

class MyWindow : JFrame {
    val table: JTable
    val peopleData: Array<Array<String>>
    val columns: Array<String>

    constructor (title: String, peopleData: Array<Character>, columns: Array<String>) : super(title) {
        setLayout(FlowLayout())

        this.peopleData = arrayOf(
            getNameAndBMI(peopleData[0]),
            getNameAndBMI(peopleData[1]),
            getNameAndBMI(peopleData[2]),
            getNameAndBMI(peopleData[3]),
            getNameAndBMI(peopleData[4]),
            getNameAndBMI(peopleData[5]),
            getNameAndBMI(peopleData[6]),
            getNameAndBMI(peopleData[7]),
            getNameAndBMI(peopleData[8]),
            getNameAndBMI(peopleData[9])
        )

        this.columns = columns

        table = JTable(this.peopleData, this.columns)  
        val sp = JScrollPane(table);
        add(sp)
    }
}

fun main() {
    fetchAll() {
        val columns = arrayOf("Name", "BMI")
        val window: MyWindow = MyWindow("Kotlin is Fun!", it, columns)
        window.pack()
        window.setVisible(true)
        window.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE)
    }
}

fun bmi(mass: Int, height: Double) : Double {
    return mass / height.pow(2)
}

fun getNameAndBMI(character: Character) : Array<String> {
    return arrayOf(character.name, character.bmi.toString())
}

fun fetchAll(callback: (Array<Character>) -> Unit) {
    thread() {
        val swapi = "https://swapi.dev/api/people/"
        val url = URL(swapi)
        val http: HttpURLConnection = url.openConnection() as HttpURLConnection
        http.setRequestMethod("GET")
        http.setRequestProperty("Accept", "application/json");
        http.setRequestProperty("Content-Type", "application/json");

        val stream: InputStream = http.getInputStream()
        val reader = InputStreamReader(stream)

        val gson = Gson()
        val peopleObj: People = gson.fromJson(reader, People::class.java)

        val people: Array<Character> = peopleObj.results
        people.forEach { it.bmi = bmi(it.mass, it.height.toDouble() / 100) }

        callback(people)
    }
}

fun fetchAndParse(peopleId: Int, callback: (Character) -> Unit) {
    thread() {
        try {
            val swapi = "https://swapi.dev/api/people/$peopleId/"
            val url = URL(swapi)
            val http: HttpURLConnection = url.openConnection() as HttpURLConnection
            http.setRequestMethod("GET")
            http.setRequestProperty("Accept", "application/json");
            http.setRequestProperty("Content-Type", "application/json");

            val stream: InputStream = http.getInputStream()
            val reader = InputStreamReader(stream)

            val gson = Gson()
            val character: Character = gson.fromJson(reader, Character::class.java)
            
            val m = character.mass
            val h = character.height.toDouble() / 100

            val bmi = bmi(m, h)
            character.bmi = bmi;

            callback(character)    
        }
        catch(e: Exception) {
            e.printStackTrace()
        }
    }
}

