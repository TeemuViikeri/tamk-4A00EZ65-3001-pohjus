/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */

import java.io.*
import kotlin.concurrent.*

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main(args: Array<String>) {
    println("A")
    if (args.size >= 2) {
        val destination = args[0]
        val source = args[1]

        saveFile(destination, source, "utf-8") {
            println(if (it) "success" else "problem")
        }
    } else {
        throw IllegalArgumentException("Application should be given two arguments: [1] path to destination file, [2] path to source file")
    }
    println("B")
}

// This saves “content” to the path/to/File.txt. The function should be also asynchronous. When saving is done, it invokes the lambda with boolean argument (if saving was successful or not). When saving, create a new file, fail if the file already exists. If some other problems arise, catch those also.
fun saveFile(destination: String, source: String, encoding: String, done: (Boolean) -> Unit ) {
    thread() {
        try {
            val dFile = File(destination)
            val sFile = File(source)
            val charset = charset(encoding) 

            val dFileWasCreated = dFile.createNewFile()

            if (dFileWasCreated) {
                val lines: List<String> = sFile.readLines(charset)
                val fw = FileWriter(dFile)
                lines.forEach { fw.write(it + System.lineSeparator()) }
                done(true)
            } else {
                done(false)
            }
        }
        catch(e: Exception) {
            e.printStackTrace()
            done(false)
        }
    }
}
